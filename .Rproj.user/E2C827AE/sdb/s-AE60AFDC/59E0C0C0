{
    "contents" : "library(shiny)\nlibrary(plyr)\nlibrary(ggplot2)\nlibrary(reshape)\n\nsource(\"general.R\")\n\n#Calculate The Mortgage Formula\nCalculateTheMortgageFormula <-function(propertyPrice,downPayment,loanPeriod,interestRate) {\n  #Formula obtain from: EMI = [(p*r/12) (1+r/12)^n]/[(1+r/12)^n â€“ 1 ]  'http://www.authorcode.com/how-to-make-emi-calculator-using-c/\n  loanAmount <- propertyPrice - downPayment\n  interestRate <-interestRate/100\n  loanPeriod <- loanPeriod * 12 \n  payment <-(loanAmount) * (((1 + interestRate/12)^ loanPeriod) * interestRate)/(12 * (((1+interestRate/12)^ loanPeriod) - 1))\n  return(payment)\n}\n\nCalculateTheMortgage<-function(propertyPrice,downPayment,loanPeriod,interestRate) {\n  if (propertyPrice==0 || is.na(propertyPrice)) \n    return(\"Please enter property price!\") \n  else if (downPayment==0 || is.na(downPayment)) \n    return(\"Please enter down payment!\") \n  else if (loanPeriod ==0 || is.na(loanPeriod)) \n    return(\"Please enter loan period!\") \n  else if (interestRate ==0|| is.na(interestRate)) \n    return(\"Please enter interest rate!\") \n  else  \n  {\n    payment <- CalculateTheMortgageFormula(propertyPrice,downPayment,loanPeriod,interestRate)\n  }\n  return(round(payment,2))\n}\n\nCalculateAmortization<-function(propertyPrice,downPayment,loanPeriod,interestRate) {\n  monthlyPayment <- CalculateTheMortgageFormula(propertyPrice,downPayment,loanPeriod,interestRate)\n  endingBalance<- propertyPrice - downPayment\n  accumulateInterest <- 0\n  accumulatePrincipal <- 0\n  loanPeriod <- loanPeriod*12\n  objlist <- list()\n  for(a in 1: loanPeriod)\n  { \n    monthlyInterestPayment <- monthlyPayment - (endingBalance * interestRate/1200)\n    \n    if(a == loanPeriod &&  (endingBalance - monthlyInterestPayment) <0)\n    {\n      monthlyInterestPayment <- monthlyInterestPayment + (endingBalance - monthlyInterestPayment)\n    }\n    \n    endingBalance <- endingBalance - monthlyInterestPayment\n    accumulatePrincipal <- accumulatePrincipal + monthlyInterestPayment\n    accumulateInterest <- accumulateInterest + (monthlyPayment - monthlyInterestPayment)\n    \n    if(a%%12 == 0)\n    {\n      data <- (c(a/12, round(accumulatePrincipal,2),round(accumulateInterest,2),round(endingBalance,2)))   \n      objlist[[a/12]] <- data \n    }\n  }\n  dt<-do.call(rbind.data.frame, objlist)\n  names(dt)=c(\"YEARS\", \"PRINCIPAL\",\"INTEREST\",\"BALANCE\")\n  return(dt)\n}\n\nshinyServer(function(input, output) {\n  output$oiCalculateTheMortgage <- renderPrint({\n    input$goButton\n    isolate(paste(\"RM\",as.character(CalculateTheMortgage(input$propertyPrice,input$downPayment,input$loanPeriod,input$interestRate))))\n  })\n  ##output$oiCalculateAmortization <- renderPrint({\n  ##  input$goButton\n  ##  isolate(CalculateAmortization(input$propertyPrice,input$downPayment,input$loanPeriod,input$interestRate))\n  ##})\n  output$newPie <- renderPlot({\n    #http://www.statmethods.net/graphs/pie.html\n    input$goButton    \n    if (input$propertyPrice!=0 && !is.na(input$propertyPrice) &&\n          input$downPayment!=0 && !is.na(input$downPayment) &&\n          input$loanPeriod !=0 && !is.na(input$loanPeriod) &&\n          input$interestRate !=0 && !is.na(input$interestRate)) \n    {\n      getTotalLoanCost <- CalculateTheMortgageFormula(input$propertyPrice,input$downPayment,input$loanPeriod,input$interestRate) * input$loanPeriod *12     \n      getTotalInterest <- getTotalLoanCost-(input$propertyPrice-input$downPayment)\n      getTotalPrincipal <- getTotalLoanCost-getTotalInterest\n      slices <- c(getTotalInterest, getTotalPrincipal)\n      lbls <- c(\"Interest\", \"Principal\")\n      pct <- round(slices/sum(slices)*100)\n      lbls <- paste(lbls, pct) # add percents to labels \n      lbls <- paste(lbls,\"%\",sep=\"\") # ad % to labels \n      pie(slices, labels = lbls,  col=rainbow(length(lbls)),main=\"Payment Breakdown\")\n    }\n  })\n  output$newPaymentSchedule <- renderPlot({\n    input$goButton  \n    if (input$propertyPrice!=0 && !is.na(input$propertyPrice) &&\n          input$downPayment!=0 && !is.na(input$downPayment) &&\n          input$loanPeriod !=0 && !is.na(input$loanPeriod) &&\n          input$interestRate !=0 && !is.na(input$interestRate)) \n    {\n      df<-(CalculateAmortization(input$propertyPrice,input$downPayment,input$loanPeriod,input$interestRate))\n      ggplot(data =df, aes(x = df$YEARS, )) + \n        #geom_line(aes(y=df$PRINCIPAL),colour=\"red\") +\n        #geom_line(aes(y=df$INTEREST),colour=\"blue\") +  \n        #geom_line(aes(y=df$BALANCE),colour=\"yellow\") +    \n        geom_point(aes(y = df$INTEREST, col = \"INTEREST\")) + \n        geom_point(aes(y = df$PRINCIPAL, col = \"PRINCIPAL\")) + \n        geom_point(aes(y = df$BALANCE, col = \"BALANCE\")) + \n        xlab(\"Years\") + \n        ylab(\"RM\") +            \n        labs(color=\"Legend\")+\n        scale_x_continuous(breaks=seq(1, input$loanPeriod, 3)) +\n        scale_y_continuous(breaks=seq(0, 100000000, 50000))\n    }\n  })  \n  output$oiCalculateAmortization2 <- renderDataTable({\n    input$goButton\n    if (input$propertyPrice!=0 && !is.na(input$propertyPrice) &&\n          input$downPayment!=0 && !is.na(input$downPayment) &&\n          input$loanPeriod !=0 && !is.na(input$loanPeriod) &&\n          input$interestRate !=0 && !is.na(input$interestRate)) \n    {\n      isolate(CalculateAmortization(input$propertyPrice,input$downPayment,input$loanPeriod,input$interestRate))\n    }\n  }, options = list(paging = FALSE,searching = FALSE))\n  output$newPlot1 <- renderPlot({\n    input$goButton\n    df1<-GetLoansAppliedbyPurpose()\n    #df1$Type <- \"AppliedPropertyLoan\"\n    df2<-GetLoansApprovedbyPurpose()\n    #df2$Type <- \"ApprovedPropertyLoan\"\n    df <- merge(df1,df2,by=\"Years\", all = TRUE)\n    ##df[is.na(df)] <-0 \n    names(df) <- c(\"Years\",\"AppliedPropertyLoan\",\"ApprovedPropertyLoan\") \n    ggplot(data =df, aes(x = df$Years, )) + \n      geom_line(aes(y=df$AppliedPropertyLoan),colour=\"red\") +\n      geom_line(aes(y=df$ApprovedPropertyLoan),colour=\"blue\") +     \n      geom_point(aes(y = df$AppliedPropertyLoan, col = \"Applied Property Loan\")) + \n      geom_point(aes(y = df$ApprovedPropertyLoan, col = \"Approved Property Loan\")) + \n      geom_text(aes(y = df$AppliedPropertyLoan, label=df$AppliedPropertyLoan))+\n      geom_text(aes(y = df$ApprovedPropertyLoan, label=df$ApprovedPropertyLoan))+\n      xlab(\"Years (2006-2013)\") + \n      ylab(\"Totals Application\") +\n      ggtitle(\"Banking System: Total Loans Applied VS Total Loan Approved\")+        \n      labs(color=\"Legend\")+\n      scale_x_continuous(breaks=seq(2006, 2015, 1))    \n  })\n  output$newPlot2 <- renderPlot({\n    input$goButton\n    df <- GetNPICData()\n    names(df)\n    ggplot(data =df, aes(x = df$Years)) +\n      geom_bar(data=df, aes(y = df$VolumnOfTrans),stat = \"identity\", fill=\"lightblue\", colour=\"darkgreen\",position = \"dodge\") +\n      ##geom_bar(data=df, aes(y= df$Value), stat = \"identity\", fill=\"yellow\", colour=\"darkgreen\",position = \"dodge\") +\n      geom_line(data=df, aes(x=df$Years, y=df$VolumnOfTrans))+\n      geom_point(aes(y = df$VolumnOfTrans, col = \"Applied Property Loan\")) + \n      geom_text(aes(y = df$VolumnOfTrans, label=df$ChangeInVol)) +\n      xlab(\"Years (1990-2014)\") +                  \n      ylab(\"RM('000)\")+\n      guides(colour=FALSE)+\n      geom_label(aes(y = df$VolumnOfTrans,label=df$ChangeInVol))+\n      ggtitle(\"Volume of Property Transaction and Annual Changes from 1990 to 2014\")+\n      scale_x_continuous(breaks=seq(1990, 2014, 1))   \n    ##stat_summary_bin(aes(y = df$VolumnOfTrans), fun.y = \"mean\", geom = \"point\")\n  })\n  output$newPaymentSchedule2 <- renderPlot({\n    if (input$propertyPrice!=0 && !is.na(input$propertyPrice) &&\n          input$downPayment!=0 && !is.na(input$downPayment) &&\n          input$loanPeriod !=0 && !is.na(input$loanPeriod) &&\n          input$interestRate !=0 && !is.na(input$interestRate)) \n    {\n      interestRate <- input$mu\n      df<-(CalculateAmortization(input$propertyPrice,input$downPayment,input$loanPeriod,interestRate))\n      ggplot(data =df, aes(x = df$YEARS, )) + \n        #geom_line(aes(y=df$PRINCIPAL),colour=\"red\") +\n        #geom_line(aes(y=df$INTEREST),colour=\"blue\") +  \n        #geom_line(aes(y=df$BALANCE),colour=\"yellow\") +    \n        geom_point(aes(y = df$INTEREST, col = \"INTEREST\")) + \n        geom_point(aes(y = df$PRINCIPAL, col = \"PRINCIPAL\")) + \n        geom_point(aes(y = df$BALANCE, col = \"BALANCE\")) + \n        xlab(\"Years\") + \n        ylab(\"RM\") +            \n        labs(color=\"Legend\")+\n        scale_x_continuous(breaks=seq(1, input$loanPeriod, 3)) +\n        scale_y_continuous(breaks=seq(0, 100000000, 50000)) \n    }\n  }) \n  output$newPie2 <- renderPlot({\n    #http://www.statmethods.net/graphs/pie.html\n    if (input$propertyPrice!=0 && !is.na(input$propertyPrice) &&\n          input$downPayment!=0 && !is.na(input$downPayment) &&\n          input$loanPeriod !=0 && !is.na(input$loanPeriod) &&\n          input$interestRate !=0 && !is.na(input$interestRate)) \n    {\n      interestRate <- input$mu\n      getTotalLoanCost <- CalculateTheMortgageFormula(input$propertyPrice,input$downPayment,input$loanPeriod,interestRate) * input$loanPeriod *12     \n      getTotalInterest <- getTotalLoanCost-(input$propertyPrice-input$downPayment)\n      getTotalPrincipal <- getTotalLoanCost-getTotalInterest\n      slices <- c(getTotalInterest, getTotalPrincipal)\n      lbls <- c(\"Interest\", \"Principal\")\n      pct <- round(slices/sum(slices)*100)\n      lbls <- paste(lbls, pct) # add percents to labels \n      lbls <- paste(lbls,\"%\",sep=\"\") # ad % to labels \n      pie(slices, labels = lbls,  col=rainbow(length(lbls)),main=\"Payment Breakdown\")\n    }    \n  })\n})\n",
    "created" : 1453466474553.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4054800438",
    "id" : "59E0C0C0",
    "lastKnownWriteTime" : 1453646352,
    "path" : "~/R/ShinyWebApp/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}